provider "aws" {
  region  = var.region
  profile = "ishan"
}

############################################
# Data sources (only AZs, no AMI lookup)
############################################
data "aws_availability_zones" "az" {
  state = "available"
}

############################################
# VPC
############################################
resource "aws_vpc" "main" {
  cidr_block           = var.vpc_cidr
  enable_dns_support   = true
  enable_dns_hostnames = true

  tags = {
    Name = "${var.project_name}-${var.environment}-vpc"
  }
}

############################################
# Internet Gateway
############################################
resource "aws_internet_gateway" "igw" {
  vpc_id = aws_vpc.main.id
  tags = {
    Name = "${var.project_name}-${var.environment}-igw"
  }
}

############################################
# Public Subnet
############################################
resource "aws_subnet" "public" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = var.public_subnet_cidr
  availability_zone       = data.aws_availability_zones.az.names[0]
  map_public_ip_on_launch = true

  tags = {
    Name = "${var.project_name}-${var.environment}-public-subnet"
  }
}

############################################
# Private Subnet
############################################
resource "aws_subnet" "private" {
  vpc_id            = aws_vpc.main.id
  cidr_block        = var.private_subnet_cidr
  availability_zone = data.aws_availability_zones.az.names[1]

  tags = {
    Name = "${var.project_name}-${var.environment}-private-subnet"
  }
}

############################################
# Route Table - Public
############################################
resource "aws_route_table" "public" {
  vpc_id = aws_vpc.main.id
  tags = {
    Name = "${var.project_name}-${var.environment}-public-rt"
  }
}

resource "aws_route" "public_inet" {
  route_table_id         = aws_route_table.public.id
  destination_cidr_block = "0.0.0.0/0"
  gateway_id             = aws_internet_gateway.igw.id
}

resource "aws_route_table_association" "public_assoc" {
  subnet_id      = aws_subnet.public.id
  route_table_id = aws_route_table.public.id
}

############################################
# Route Table - Private
############################################
resource "aws_route_table" "private" {
  vpc_id = aws_vpc.main.id
  tags = {
    Name = "${var.project_name}-${var.environment}-private-rt"
  }
}

resource "aws_route_table_association" "private_assoc" {
  subnet_id      = aws_subnet.private.id
  route_table_id = aws_route_table.private.id
}

############################################
# Security Group for NAT Instance
############################################
resource "aws_security_group" "nat" {
  name        = "${var.project_name}-${var.environment}-nat-sg"
  description = "Security group for NAT instance"
  vpc_id      = aws_vpc.main.id

  ingress {
    description = "All traffic from VPC"
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = [var.vpc_cidr]
  }

  ingress {
    description = "SSH"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    description = "All outbound traffic"
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "${var.project_name}-${var.environment}-nat-sg"
  }
}




############################################
# NAT Instance
############################################
resource "aws_instance" "nat" {
  ami                    = var.nat_ami_id
  instance_type          = "t3.micro"
  subnet_id              = aws_subnet.public.id
  key_name               = var.key_name
  vpc_security_group_ids = [aws_security_group.nat.id]
  
  source_dest_check = false

  user_data = <<-EOF
  #!/bin/bash
  yum update -y
  yum install -y iptables-services

  # Enable IP forwarding
  echo 'net.ipv4.ip_forward = 1' >> /etc/sysctl.conf
  sysctl -w net.ipv4.ip_forward=1

  # Get the interface used for default route (internet)
  PUBLIC_IF=$(ip route | awk '/default/ {print $5}')

  # Add NAT MASQUERADE rule for VPC CIDR
  iptables -t nat -A POSTROUTING -o $PUBLIC_IF -s ${var.vpc_cidr} -j MASQUERADE

  # Save iptables rules and enable at boot
  iptables-save > /etc/sysconfig/iptables
  systemctl enable iptables
  systemctl start iptables
EOF

  tags = {
    Name = "${var.project_name}-${var.environment}-nat-instance"
  }

  user_data_replace_on_change = true
}

resource "aws_eip" "nat" {
  domain   = "vpc"
  instance = aws_instance.nat.id
  depends_on = [aws_internet_gateway.igw]

  tags = {
    Name = "${var.project_name}-${var.environment}-nat-eip"
  }
}

resource "aws_route" "private_nat" {
  route_table_id         = aws_route_table.private.id
  destination_cidr_block = "0.0.0.0/0"
  network_interface_id   = aws_instance.nat.primary_network_interface_id
  depends_on             = [aws_instance.nat]
}




